@page "/orders"
@using CafeMaya.Models;
@using CafeMaya.Services
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<OrderDataProvider> OrderContextFactory

@if (Orders.Any())
{
    <div class="flex lg:flex-row flex-col p-5 h-full w-full gap-5">
        <table class="border-collapse h-full w-full table-auto">
            <thead class="bg-slate-300">
            <tr>
                <th class="p-3 text-xl">ID</th>
                <th class="p-3 text-xl">Время</th>
                <th class="p-3 text-xl">Итог</th>
                <th class="p-3 text-xl">Доставка</th>
                <th class="p-3 text-xl">Статус</th>
            </tr>
            </thead>
            <tbody class="divide-y">
            @foreach (var order in Orders)
            {
                <tr class="text-center transition hover:bg-gray-100 @(order.Id == SelectedOrder?.Id ? "bg-gray-200" : string.Empty)" @onclick="@(() => SelectedOrder = order)">
                    <td class="p-3 text-lg">@order.Id</td>
                    <td class="p-3 text-lg">@order.CreatedOn.ToString("HH:mm")</td>
                    <td class="p-3 text-lg">@order.Total.ToString("C")</td>
                    <td class="p-3 text-lg">@(string.IsNullOrWhiteSpace(order.Address) ? "Нет" : "Да")</td>
                    <td class="p-3 text-lg flex justify-center">
                        <select @onchange="@(args => OnOrderStatusChanged(args.Value, order))" value="@order.Status" name="order_status" id="order_status" class="rounded-lg text-center border bg-transparent lg:w-1/2 w-full @(GetClassNameFromStatus(order.Status))">
                            @foreach (Order.OrderStatus status in Enum.GetNames(typeof(Order.OrderStatus)).Select(s => Enum.Parse(typeof(Order.OrderStatus), s)))
                            {
                                <option value="@status.ToString()">@GetNameFromStatus(status)</option>
                            }
                        </select>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        @if (SelectedOrder != null)
        {
            <div class="flex flex-col bg-slate-300 rounded-lg p-5 h-full lg:w-1/3 w-full">
                <div class="flex flex-row justify-between text-2xl p-3 border-b border-dashed border-gray-500">
                    <p class="font-bold">ID Заказа:</p>
                    <p>@SelectedOrder.Id</p></div>
                <div class="flex flex-row justify-between text-2xl p-3 border-b border-dashed border-gray-500">
                    <p class="font-bold">Время заказа:</p>
                    <p>@SelectedOrder.CreatedOn.ToString("HH:mm")</p></div>
                <table>
                    <thead>
                    <tr>
                        <th class="p-3 text-xl">Наименование</th>
                        <th class="p-3 text-xl">Кол-во</th>
                        <th class="p-3 text-xl">Подитог</th>
                    </tr>
                    </thead>
                    <tbody class="text-center divide-y">
                    @foreach (OrderItem item in SelectedOrder!.Items!)
                    {
                        <tr class="border-dashed border-gray-500">
                            <td class="text-lg p-3">@item.Item.Name</td>
                            <td class="text-lg p-3">@item.Quantity</td>
                            <td class="text-lg p-3">@item.Subtotal.ToString("C")</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </div>
}
else
{
    <div class="flex justify-center h-screen w-screen text-center text-gray-800 text-9xl font-light bg-slate-300">
        <div class="flex flex-col justify-center h-screen w-screen">
            <p>Здесь пока нет заказов :(</p>
        </div>
    </div>
}

@code
{
    List<Order> Orders {get;} = new();
    
    Order? SelectedOrder { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var orderContext = await OrderContextFactory.CreateDbContextAsync();
        await orderContext.Database.MigrateAsync();
        
        Orders.AddRange(orderContext.Orders.Include(o => o.Items)!.ThenInclude(oi => oi.Item).ToList());
        
        await base.OnInitializedAsync();
    }

    private void OnOrderStatusChanged(object? value, Order order)
    {
        if (value is not string val) return;
        using var orderCtx = OrderContextFactory.CreateDbContext();
        orderCtx.Attach(order);
        order.Status = (Order.OrderStatus)Enum.Parse(typeof(Order.OrderStatus), val);
        orderCtx.SaveChanges();
    }

    private string GetClassNameFromStatus(Order.OrderStatus status) => status switch
    {
        Order.OrderStatus.Awaiting => Yellow,
        Order.OrderStatus.Complete => Green,
        Order.OrderStatus.Cooking => Orange,
        Order.OrderStatus.AwaitingDelivery => Yellow,
        Order.OrderStatus.Delivery => Orange,
        Order.OrderStatus.Canceled => Red,
        _ => throw new ArgumentOutOfRangeException(nameof(status), status, null)
    };
    
    private string GetNameFromStatus(Order.OrderStatus status) => status switch
    {
        Order.OrderStatus.Awaiting => "Ожидание",
        Order.OrderStatus.Complete => "Готово",
        Order.OrderStatus.Cooking => "Приготавливается",
        Order.OrderStatus.AwaitingDelivery => "Ожидает доставки",
        Order.OrderStatus.Delivery => "Доставляется",
        Order.OrderStatus.Canceled => "Отменено",
        _ => throw new ArgumentOutOfRangeException(nameof(status), status, null)
        };
    
    private const string Yellow = "text-yellow-500 border-yellow-500";
    private const string Orange = "text-orange-500 border-orange-500";
    private const string Red = "text-red-500 border-red-500";
    private const string Green = "text-green-500 border-green-500";
}